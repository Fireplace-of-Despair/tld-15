@page "/projects/{idFriendly}"
@using Common.Composition
@using System.Globalization
@using Common.Utils
@using TLD15.Utils
@model TLD15.Pages.Projects.ReadModel

@{
    ViewData[Globals.Page.Title] = $"{Globals.Brand.Title} | {Model.Model.Title}";
    ViewData[Globals.Page.Description] = Model.Model.SubTitle;

    ViewData[Globals.OpenGraph.Url] = Model.Host.TrimLast('/') + ViewContext.HttpContext.Request.Path;
    ViewData[Globals.OpenGraph.Image] = Model.Model.PosterUrl;
    ViewData[Globals.OpenGraph.Locale] = Globals.Settings.Locale;
    ViewData[Globals.OpenGraph.ArticleAuthor] = Globals.Brand.Author;
}

@if (!ModelState.IsValid)
{
    <article class="article-content">
        @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </article>

    return;
}

<style>
    .component-container {
        min-width: 90%;
        max-width: 90%;
        margin-top: 15px;
        padding-top: 10px;
        text-align: center;
        background-color: var(--brand-color-first);
        color: var(--brand-color-third);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .component-content {
        max-width: 1000px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .component-title {
        font-size: 40px;
        padding: 0;
        background: var(--brand-color-first);
        margin-top: 0;
        margin-bottom: 5px;
    }

    article {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .external-links-container {
        margin-bottom: 10px;
        margin-left: 5%;
        margin-right: 5%;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 10px;
    }

    .external-button {
        height: 50px;
        display: flex;
        flex-direction: row;
        text-decoration: none;
        color: var(--color-background) !important;
        margin-right: 10px;
    }

        .external-button:hover {
            filter: brightness(0) saturate(100%) invert(40%) sepia(56%) saturate(5293%) hue-rotate(342deg) brightness(94%) contrast(93%);
        }

    .external-button-language {
        font-size: 21px;
        border: 1px solid var(--brand-color-third);
        color: var( --brand-color-third);
        writing-mode: vertical-rl;
        text-orientation: upright;
    }

    .external-button-icon {
        object-fit: cover;
        width: 50px !important;
        height: 50px !important;
        filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(7484%) hue-rotate(203deg) brightness(103%) contrast(101%);
    }

    article img {
        filter: grayscale(100%);
        transition: filter 0.3s ease;
    }

        article img:hover {
            filter: grayscale(0%);
        }

    .article-poster-container {
        border: 1px solid var(--brand-color-third);
        position: relative;
        width: 100%;
        height: 500px;
        max-height: 500px;
        overflow: hidden;

        justify-content: center;

        min-width: 90%;
        max-width: 1000px;
        margin-top: 15px;
        text-align: center;
        background-color: var(--brand-color-first);
        color: var(--brand-color-third);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

        .article-poster-container img {
            width: 100%;
            object-fit: cover;
            height: 500px;
            max-height: 500px;
        }

    .article-poster-division {
        position: absolute;
        top: -1px;
        left: -1px;
        background-color: var(--color-background);
        color: var(--brand-color-third);
        border: 1px solid var(--brand-color-third);
        width: 70px;
        padding: 5px;
        height: 20px;
        font-size: 20px;
        font-weight: 600;
        text-align: center;
    }

    .article-poster-date {
        position: absolute;
        top: -1px;
        right: -1px;
        background-color: var(--color-background);
        color: var(--brand-color-third);
        border: 1px solid var(--brand-color-third);
        width: 115px;
        padding: 5px;
        height: 20px;
        font-size: 17px;
        text-align: center;
    }

    .article-poster-version {
        position: absolute;
        top: 30px;
        right: -1px;
        background-color: var(--color-background);
        color: var(--brand-color-third);
        border: 1px solid var(--brand-color-third);
        width: 115px;
        padding: 5px;
        height: 20px;
        font-size: 17px;
        text-align: center;
    }

    .article-poster-text-overlay {
        position: absolute;
        text-align: center;
        color: var(--brand-color-third);
        z-index: 1;
    }

        .article-poster-text-overlay h1 {
            font-size: 50px !important;
            margin: 0 !important;
            padding: 10px !important;
            background: var(--brand-color-first) !important;
        }

    .article-poster-text-overlay-sub {
            font-size: 30px !important;
            margin: 10px !important;
            padding: 10px !important;
            background: var(--brand-color-first) !important;
        }
</style>

<article>
    <div class="article-poster-container">
        @if (string.IsNullOrEmpty(Model.Model.PosterUrl))
        {
            <img loading="lazy" height="500"
                 src="/images/placeholder/article.png"
                 alt="@Model.Model.PosterAlt"
                 aria-labelledby="@Model.Model.PosterAlt">
        }
        else
        {
            <img loading="lazy" height="500"
                 src="@Model.Model.PosterUrl"
                 alt="@Model.Model.PosterAlt"
                 aria-labelledby="@Model.Model.PosterAlt">
        }
        <div class="article-poster-division"
             data-tooltip="@Globals.Brand.Divisions[Model.Model.DivisionCode]">
            @Model.Model.DivisionCode.ToUpper()
        </div>
        <div class="article-poster-date">
            <time datetime="@Model.Model.CreatedAt">@Model.Model.CreatedAt.ToString(Globals.Settings.DateFormat, CultureInfo.InvariantCulture)</time>
        </div>
        <div class="article-poster-version">
            <div>Version: @Model.Model.Version</div>
        </div>
        <div class="article-poster-text-overlay">
            <h1>@Model.Model.Title</h1>
            <div class="article-poster-text-overlay-sub">@Model.Model.SubTitle</div>
        </div>
    </div>


    @foreach (var item in Model.Model.GetContentHtmlSplitByHR())
    {
        <div class="component-container">
            <section class="component-content">
                @Html.Raw(item)
            </section>
        </div>
    }

    <div class="component-container">
        <h2 class="component-title">@Globals.Controls.Links</h2>
        <div class="external-links-container">
            @foreach (var link in Model.Model.Links)
            {
                <a class="external-button" href="@link.Value">
                    <div class="external-button-language">
                        @if (!string.IsNullOrEmpty(IconHelper.GetLanguage(@link.Key)))
                        {
                            @IconHelper.GetLanguage(@link.Key)
                        }
                    </div>
                    <img class="external-button-icon" loading="lazy"
                         height="50" width="50"
                         src="@IconHelper.GetIcon(@link.Key)"
                         alt="@link.Key">
                </a>
            }
        </div>
    </div>
</article>
